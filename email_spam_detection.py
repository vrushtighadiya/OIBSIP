# -*- coding: utf-8 -*-
"""email Spam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lXBNEz9PnfKCA9EhwLARCLiqzw87eBgP
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#reading dataset
df = pd.read_csv('task4spamemaildata.csv' , encoding = 'ISO-8859-1')

df.head()

df.tail()

df.shape

df.info()

df.describe()

df.isnull().sum()

df.drop(columns=['Unnamed: 2','Unnamed: 3','Unnamed: 4'],inplace=True)
df

df.isnull().sum()

df=df.rename(columns={'v1':'Target','v2':'Message'})

df.drop_duplicates(keep='first',inplace=True)
df.duplicated().sum()

sns.countplot(x='Target', data=df, palette=['blue', 'red'])
plt.title('Count of spams and hams')
plt.xlabel('Spam or Ham')
plt.ylabel('count')
plt.show()

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
df['Target']=encoder.fit_transform(df['Target'])
df['Target']
df.head()
plt.pie(df['Target'].value_counts(), labels = ['ham', 'spam'], autopct = "%0.2f")
plt.show()

df['text_length'] = df['Message'].apply(len)

# Plotting histogram
plt.figure(figsize=(10, 5))
sns.histplot(data=df, x='text_length', hue='Target', kde=True, bins=20)
plt.title('Histogram of Text Length for Spam and Ham')
plt.xlabel('Text Length')
plt.ylabel('Frequency')
plt.legend(title='Target')
plt.show()

x=df['Message']
y=df['Target']
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=3)  #splitting data into train and test
from sklearn.feature_extraction.text import  CountVectorizer
from sklearn import svm

cv=CountVectorizer()
x_train_cv = cv.fit_transform(x_train)
x_test_cv = cv.transform(x_test)
print(x_train_cv)

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression() #creating model
lr.fit(x_train_cv,y_train)
prediction_train=lr.predict(x_train_cv)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_train, prediction_train)*100)

prediction_test = lr.predict(x_test_cv)
prediction_test

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, prediction_test)*100)